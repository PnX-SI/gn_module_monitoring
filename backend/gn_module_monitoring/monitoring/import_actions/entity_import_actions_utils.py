from geonature.core.imports.models import Entity, TImports
from geonature.core.imports.checks.dataframe.cast import check_types
from geonature.core.imports.checks.dataframe.core import check_required_values
import re
from geonature.utils.env import db
import sqlalchemy as sa
from sqlalchemy.orm import aliased, joinedload

from geonature.core.imports.utils import (
    get_mapping_data,
    load_transient_data_in_dataframe,
    update_transient_data_from_dataframe,
)

from geonature.core.imports.checks.sql.extra import (
    check_entity_data_consistency,
    disable_duplicated_rows,
)


class EntityImportActionsUtils:
    @staticmethod
    def get_destination_column_name(transient_table_column_name: str) -> str:
        return re.sub(r"^.*?__", "", transient_table_column_name)

    @staticmethod
    def get_entity(imprt: TImports, entity_code: str) -> Entity:
        return Entity.query.filter_by(
            code=entity_code, id_destination=imprt.destination.id_destination
        ).one()

    @staticmethod
    def dataframe_checks(imprt, df, entity, fields):
        updated_cols = set({})
        updated_cols |= check_types(
            imprt, entity, df, fields
        )  # FIXME do not check site and visit uuid twice

        updated_cols |= check_required_values(imprt, entity, df, fields)

        return updated_cols

    @staticmethod
    def get_destination_fields(imprt: TImports, entity: Entity) -> None:
        fields = {
            ef.field.name_field: ef.field for ef in entity.fields if ef.field.dest_field != None
        }
        entity_fields = set()
        # insert_fields = {fields["id_station"]}
        for field_name, mapping in imprt.fieldmapping.items():
            if field_name not in fields:  # not a destination field
                continue
            field = fields[field_name]
            column_src = mapping.get("column_src", None)
            if field.multi:
                if not set(column_src).isdisjoint(imprt.columns):
                    entity_fields |= {field}
            else:
                if column_src in imprt.columns or mapping.get("constant_value", None) is not None:
                    entity_fields |= {field}

        if entity.code == "site":
            entity_fields |= {
                fields["id_base_site"],
                fields["s__geom_4326"],
                fields["s__geom_local"],
            }
            entity_fields -= {fields["s__types_site"]}
        elif entity.code == "visit":
            entity_fields |= {
                fields["id_base_site"],
                fields["id_base_visit"],
                fields["id_dataset"],
            }
        elif entity.code == "observation":
            # We don't select id_observation because it must be generated by the DB on insert
            entity_fields |= {
                fields["id_base_visit"],
            }

        return entity_fields
